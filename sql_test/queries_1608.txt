/*
Пример заполнения столбца с условием
*/

SELECT * FROM course;
	
SELECT 
	c.name,
	c.amount_of_students,
	CASE
		WHEN c.amount_of_students < 25
			THEN 'малокомплектная группа'
		WHEN c.amount_of_students >= 25 AND c.amount_of_students < 50
			THEN 'группа среднего размера'
		WHEN c.amount_of_students > 200 AND c.amount_of_students < 250
			THEN 'группа большого размера, поточный курс'
		ELSE 'более одной группы'
	END AS amount_text_str
FROM course c
ORDER BY c.name, amount_text_str


SELECT 
	c.name,
	c.amount_of_students,
	CASE
		WHEN c.amount_of_students < 25
			THEN 'малокомплектная группа'
		WHEN c.amount_of_students >= 25 AND c.amount_of_students < 50
			THEN 'группа среднего размера'
		WHEN c.amount_of_students > 200 AND c.amount_of_students < 250
			THEN 'группа большого размера, поточный курс'
		ELSE 'более одной группы'
	END AS amount_text_str
FROM course c
ORDER BY 
	CASE 
		WHEN c.amount_of_students = 300 
			THEN -1
		ELSE 
			c.amount_of_students
	END
LIMIT 4;

/*
Возьмите таблицу по продажам кофе:
Идентификатор данных
SALE_DTTM – точное время продажи (запрос на время продажи TIMESTAMP),
CARD_NUMBER – номер скидочной карты (integer, вопрос - верно ли считан?)
COFFEE_TYPE – название проданного кофейного напитка -> доп таблица с напитками
COFFEE_PRICE - цена напитка -> вещественное число
DISCOUNT – размер скидки в %? (вещественное число)
GROCERY_FLG – флаг покупки выпечки в том же чеке -> доп таблица с выпечкой
PRICE – полная стоимость в чеке (запрос по данным)

('2020-04-01', 38, 'cappuccino', 130, 0.05, 1, 218.5),
('2020-04-01', 28, 'cappuccino', 130, 0, 1, 230),
('2020-04-01', 14, 'cappuccino', 130, 0.1, 0, 117),
('2020-04-01', NULL, 'cappuccino', 130, 0.05, 1, 218.5),
('2020-04-01', 7, 'cappuccino', 130, 0, 1, 230),
('2020-04-01', 20, 'americano', 120, 0.05, 1, 209),
('2020-04-01', 38, 'cappuccino', 130, 0.05, 0, 123.5),
('2020-04-01', 18, 'cappuccino', 130, 0, 0, 130),
('2020-04-01', 22, 'cappuccino', 130, 0.05, 1, 218.5),
('2020-04-01', 10, 'cappuccino', 130, 0.1, 0, 117);
*/

CREATE SCHEMA coffee_shop;

SHOW search_path;

SET search_path TO coffee_shop, public;

CREATE TABLE IF NOT EXISTS coffee_sales (
    coffee_sales_id SERIAL PRIMARY KEY,
    sale_dttm TIMESTAMP,
    card_number INTEGER,
    coffee_type VARCHAR(32) NOT NULL,
    coffee_price DECIMAL,
    discount DECIMAL(3,2),
    grocery_flag SMALLINT,
    price DECIMAL
);


	COMMENT ON TABLE coffee_sales IS 'Таблица с данными продаж кофе';
	
	COMMENT ON COLUMN coffee_sales.coffee_sales_id IS 'идентификатор покупки в кофейне';
	COMMENT ON COLUMN coffee_sales.sale_dttm IS 'точное время продажи';
	COMMENT ON COLUMN coffee_sales.card_number IS 'номер скидочной карты';
	COMMENT ON COLUMN coffee_sales.coffee_type IS 'название проданного кофейного напитка';
	COMMENT ON COLUMN coffee_sales.coffee_price IS 'цена напитка';
	
	
	SELECT c.oid FROM pg_catalog.pg_class c WHERE c.relname = 'coffee_sales';
	
	-- oid - идентификатор таблицы в вашей БД
	SELECT c.oid 
	FROM pg_catalog.pg_class c 
	WHERE c.relname = 'coffee_sales';
	
	-- Описание таблицы 
	select pg_catalog.obj_description(25364); 

	-- Прочитать комментарий о столбце в в БД --
	select pg_catalog.col_description(25297, 0);
	
	-- Прочитать комментарий о столбце в в БД --
	select * from pg_catalog.pg_tables;
	
	-- Вывести данные комментариев за столбцы
	select
		c.table_schema,
		c.table_name,
		c.column_name,
		pgd.description
	from pg_catalog.pg_statio_all_tables as st
	inner join pg_catalog.pg_description pgd on (
		pgd.objoid = st.relid
	)
	inner join information_schema.columns c on (
		pgd.objsubid   = c.ordinal_position and
		c.table_schema = st.schemaname and
		c.table_name   = st.relname
	);

	SELECT * FROM coffee_sales;

	INSERT INTO coffee_sales (sale_dttm, card_number, coffee_type, coffee_price, discount, grocery_flag, price)
    VALUES
		('2020-04-01 13:33:15', 38, 'cappuccino', 130, 0.05, 1, 218.5),
		('2020-04-01 13:45:12', 28, 'cappuccino', 130, 0, 1, 230),
		('2020-04-01 18:01:13', 14, 'cappuccino', 130, 0.1, 0, 117),
		('2020-04-01 11:52:10', NULL, 'cappuccino', 130, 0.05, 1, 218.5),
		('2020-04-01 10:08:55', 7, 'cappuccino', 130, 0, 1, 230),
		('2020-04-01 13:45:06', 20, 'americano', 120, 0.05, 1, 209),
		('2020-04-01 13:53:12', 38, 'cappuccino', 130, 0.05, 0, 123.5),
		('2020-04-01 16:58:08', 18, 'cappuccino', 130, 0, 0, 130),
		('2020-04-01 10:52:15', 22, 'cappuccino', 130, 0.05, 1, 218.5),
		('2020-04-01 18:01:30', 10, 'cappuccino', 130, 0.1, 0, 117);

    INSERT INTO coffee_sales (sale_dttm, card_number, coffee_type, coffee_price, discount, grocery_flag, price)
    VALUES
		('2020-04-02 13:33:15', 38, 'americano', 130, 0.05, 1, 218.5),
		('2020-04-03 13:45:12', 28, 'americano', 130, 0, 1, 230),
		(CURRENT_TIMESTAMP, 14, 'cappuccino', 130, 0.1, 0, 117),
		('2020-04-03 11:52:10', NULL, 'cappuccino', 130, 0.05, 1, 218.5),
		('2020-04-03 10:08:55', 7, 'cappuccino', 130, 0, 1, 230),
		('2020-04-05 13:45:06', 20, 'americano', 120, 0.05, 1, 209),
		('2020-04-05 13:53:12', 38, 'cappuccino', 130, 0.05, 0, 123.5),
		('2020-04-05 16:58:08', 18, 'cappuccino', 130, 0, 0, 130),
		(CURRENT_TIMESTAMP, 22, 'americano', 130, 0.05, 1, 218.5),
		(CURRENT_TIMESTAMP, 10, 'americano', 130, 0.1, 0, 117);

/*
    A. Выведите среднюю цену, предыдущую покупку по клиенту, уберите (отфильтруйте) клиентов без карты
	
    - карта 
	- среднюю цену (avg(цена), sum(цена)/count(цена))
	- предыдущую покупку по клиенту (lag)
	- фильтр WHERE CARD_NUMBER IS NOT NULL
	- если сортировки нет в задании (или не используется в подзапросах), то она не нужна

	NaN <- null, NULL
*/
SELECT 
	card_number,
	SUM(price) OVER(PARTITION BY sale_dttm::date)/COUNT(price) OVER(PARTITION BY sale_dttm::date) AS average_price,
	AVG(price) OVER(PARTITION BY sale_dttm::date) AS post_avg_price,
	price,
	LAG(price) OVER (PARTITION BY card_number ORDER BY sale_dttm::date) AS previous_price
FROM coffee_sales
WHERE card_number IS NOT NULL
GROUP BY card_number, price, sale_dttm::date;

/*
    B. Выведите клиента (card_number), который чаще всех покупал выпечку 
    GROCERY_FLG
    */

INSERT INTO coffee_sales (sale_dttm, card_number, coffee_type, coffee_price, discount, grocery_flag, price)
    VALUES
		(CURRENT_TIMESTAMP, 38, 'cappuccino', 130, 0.05, 1, 250.0);
-- TODO как переписать запрос?
    SELECT 
        card_number, 
        COUNT(*) AS count_grocery
    FROM coffee_sales
    WHERE grocery_flag = 1
    GROUP BY card_number
    ORDER BY COUNT(*) DESC
    LIMIT 1;
/*
    C. Кто из покупателей чаще покупает только кофе без выпечки
*/

SELECT 
    card_number, 
    COUNT(*) AS count_grocery
FROM coffee_sales
WHERE grocery_flag = 0
GROUP BY card_number
ORDER BY COUNT(*) DESC
LIMIT 1;

/*
    D. Не меняя количество строк, добавить столбцы 
    количество и сумма продаж кофейни за текущий день
*/
--Вариант составлению подзапроса --
SELECT
  sale_dttm::date,
  COUNT(*) AS daily_sales,
  SUM(price) AS daily_income
FROM sales
GROUP BY sale_dttm::date;

/*
    D+. Не меняя количество строк, добавить столбцы 
    среднее значение продаж кофейни по типу кофе
*/
SELECT
	cs.sale_dttm::date,
	cs.coffee_type,
	COUNT(*) AS daily_sales,
	SUM(cs.price) AS daily_income
FROM coffee_sales cs
GROUP BY cs.sale_dttm::date, cs.coffee_type
ORDER BY sale_dttm::date;
	

--Вариант с подзапросом по заданию --
WITH statics_sales AS (
		SELECT
		  sale_dttm::date,
		  COUNT(*) AS daily_sales,
		  SUM(price) AS daily_income
		FROM coffee_sales
		GROUP BY sale_dttm::date
	)
	
	
SELECT *
FROM coffee_sales cs
JOIN statics_sales sts ON sts.sale_dttm = cs.sale_dttm::date;

WITH statistics_by_type AS (
		SELECT
			cs.sale_dttm::date AS sales_date,
			cs.coffee_type,
			COUNT(*) AS daily_sales_by_type,
			SUM(cs.price) AS daily_income_by_type
		FROM coffee_sales cs
		GROUP BY cs.sale_dttm::date, cs.coffee_type
		ORDER BY sale_dttm::date
	)
	
	SELECT *
	FROM coffee_sales csa
	JOIN statistics_by_type stbt 
		ON stbt.sales_date = csa.sale_dttm::date
		AND stbt.coffee_type = csa.coffee_type;

	DROP VIEW average_sales_date_type;
	CREATE VIEW average_sales_date_type AS (
		
		WITH statistics_by_type AS (
			SELECT
				cs.sale_dttm::date AS sales_date,
				cs.coffee_type,
				COUNT(cs.*) AS daily_sales_by_type,
				SUM(cs.price) AS daily_income_by_type
			FROM coffee_sales cs
			GROUP BY cs.sale_dttm::date, cs.coffee_type
			ORDER BY sale_dttm::date
		)
	
		SELECT csa.*,
			stbt.daily_sales_by_type,
			stbt.daily_income_by_type
		FROM coffee_sales csa
		JOIN statistics_by_type stbt 
			ON stbt.sales_date = csa.sale_dttm::date
			AND stbt.coffee_type = csa.coffee_type
	);

	CREATE OR REPLACE VIEW average_sales_date_type AS (
		
		WITH statistics_by_type AS (
			SELECT
				cs.sale_dttm::date AS sales_date,
				cs.coffee_type,
				COUNT(cs.*) AS daily_sales_by_type,
				SUM(cs.price) AS daily_income_by_type
			FROM coffee_sales cs
			GROUP BY cs.sale_dttm::date, cs.coffee_type
			ORDER BY sale_dttm::date
		)
	
		SELECT csa.*,
			stbt.daily_sales_by_type,
			stbt.daily_income_by_type
		FROM coffee_sales csa
		JOIN statistics_by_type stbt 
			ON stbt.sales_date = csa.sale_dttm::date
			AND stbt.coffee_type = csa.coffee_type
	);


/*
    E. Не меняя количество строк, добавить столбцы 
    Количество и сумма покупок клиента (card_number) за текущий день
*/

--Вариант составлению подзапроса --
SELECT
	cs.card_number,
	cs.sale_dttm::date,
	COUNT(cs.*) AS customer_daily_sales,
	SUM(cs.price) AS customer_daily_income
FROM coffee_sales cs
WHERE cs.card_number IS NOT NULL AND cs.sale_dttm::date = CURRENT_DATE
GROUP BY cs.card_number, cs.sale_dttm::date;

--Вариант с подзапросом по заданию --
WITH statics_client AS (
	SELECT
		cs.card_number,
		cs.sale_dttm::date,
		COUNT(cs.*) AS customer_daily_sales,
		SUM(cs.price) AS customer_daily_income
	FROM coffee_sales cs
	WHERE cs.card_number IS NOT NULL
	GROUP BY cs.card_number, cs.sale_dttm::date
)

SELECT csa.*,
	stc.customer_daily_sales,
	stc.customer_daily_income
FROM coffee_sales csa
JOIN statics_client stc 
	ON ((stc.card_number = csa.card_number)
	AND (stc.sale_dttm = csa.sale_dttm::date))
WHERE csa.sale_dttm::date = CURRENT_DATE;



