/*
Варианты работы с базой для аналитика
1 вариант - мы можем проектировать, структурировать, явно менять БД
CREATE, SELECT, UPDATE, INSERT, DELETE
ALTER

2 вариант - работаем с выделенной схемой для аналитиков
CREATE, SELECT, UPDATE, INSERT, DELETE в рамках 1 схемы, но не всей БД
Остальные таблицы - только на чтение 

3 вариант - доступ к базе только на чтение, все новое согласовывается, можем создавать только VIEW (представление)


Варианты запросов
Тразнакция понятие, понятие доступа к БД
https://postgrespro.ru/docs/postgresql/14/tutorial-transactions
READ (SELECT) - не изменяет данные

INSERT, UPDATE, ALTER, CREATE, DELETE|DROP - небезопасные команды 

Аналитические команды
OVER, PARTITION, LEAD, LAG, WINDOW
https://www.postgresql.org/docs/current/functions-window.html
https://www.postgresql.org/docs/current/tutorial-window.html


Обновления по ограничениям (foreign key) https://postgrespro.ru/docs/postgresql/15/ddl-constraints?lang=en
*/

--- Создать БД ---
CREATE DATABASE test_window;

--- Создать схему ---
CREATE SCHEMA employee;
create schema statistics;

--- Получить текущую схему, в которой по умолчанию ищется таблица ---
show search_path;

CREATE SCHEMA employee;

--- Создать таблицу в схеме по умолчанию ---

CREATE TABLE IF NOT EXISTS client
	(
		client_id BIGSERIAL PRIMARY KEY,
		name VARCHAR(100)
	);

--- Создать таблицу в схеме по умолчанию ---

CREATE TABLE IF NOT EXISTS diabet (
    person_id SERIAL PRIMARY KEY,
    person_name VARCHAR(100),
    pregnancies INTEGER,
    glucose INTEGER,
    blood_pressure INTEGER,
    skin_thickness INTEGER,
    insulin INTEGER,
    bmi DOUBLE PRECISION,
    diabetes_pedigree_func DOUBLE PRECISION,
    age INTEGER,
    outcome INTEGER
  );


--- Заполнить таблицу в схеме по умолчанию ---
insert into client (client_id, name) 
	values
		(1, 'Microsoft'),
		(2, 'Yandex'),
		(3, 'СберТех'),
		(4, 'ВТБ'),
		(5, 'МаилРуГрупп'),
		(6, 'АКБарс'),
		(7, 'Иннотех Касперский');


--- Заполнить таблицу в схеме по умолчанию ---
insert into client (name) 
	values
		('Microsoft'),
		('Yandex'),
		('СберТех'),
		('ВТБ'),
		('МаилРуГрупп'),
		('АКБарс'),
		('Иннотех Касперский');

--- Поменять текущую схему на список схем ---
SET search_path TO employee, public;

--- Поменять текущую схему ---
SET search_path TO employee;

--- Создать таблицу в текущей схеме ---
CREATE TABLE IF NOT EXISTS emp_salary (
		emp_salary_id serial primary key,
		dep_name varchar,
		emp_no bigint,
		salary int,
		enroll_date date
	);

---Поменять тип колонки--
alter table emp_salary 
alter column dep_name 
type character varying(255);

--- Заполнить таблицу в текущей схеме ---
INSERT INTO emp_salary (dep_name, emp_no, salary, enroll_date)
	VALUES 
	('develop', 10, 5200, '2007-08-01'),
	('sales', 1, 5000, '2006-10-01'),
	('personnel', 5, 3500, '2007-12-10'),
	('sales', 4, 4800, '2007-08-08'),
	('personnel', 2, 3900, '2006-12-23'),
	('develop', 7, 4200, '2008-01-01'),
	('develop', 9, 4500, '2008-01-01'),
	('sales', 3, 4800, '2007-08-01'),
	('develop', 8, 6000, '2006-10-01'),
	('develop', 11, 5200, '2007-08-15');

--UPDATE - обновление данных--
update emp_salary es set salary = 12000 where es.emp_salary_id = 2

--- Агрегирующая функция суммы ---
SELECT SUM(emp.salary) FROM emp_salary AS emp;

--- Агрегирующая функция суммы ---
SELECT emp.dep_name, AVG(emp.salary), SUM(emp.salary), MIN(emp.salary), MAX(emp.salary)
FROM emp_salary emp
group by emp.dep_name
having SUM(emp.salary) > 5000;

WHERE emp.dep_name != "sales" 

/*
select * from emp_salary emp
where dep_name not like '%sales%'*/

--- Агрегирующая функция среднего ---
SELECT AVG(emp.salary) FROM emp_salary AS emp;

/*
Функциональное окно по наименованию департамента с агрегирующей функцией
https://postgrespro.ru/docs/postgrespro/12/functions-window
*/
SELECT emp.dep_name, emp.emp_no, AVG(emp.salary), SUM(emp.salary), MIN(emp.salary), MAX(emp.salary)
over (partition by emp.dep_name)
FROM emp_salary emp
group by emp.dep_name, emp.emp_no, emp.salary
order by dep_name, emp_no;

/*
Функциональное окно с несколькими агрегациями
https://postgrespro.ru/docs/postgrespro/12/functions-window
*/
    SELECT * FROM(
    SELECT 
        dep_name,
        emp_no, 
        salary,
        sum(salary) OVER (PARTITION BY dep_name ORDER BY dep_name) AS test_sum,
        min(salary) OVER (PARTITION BY dep_name ORDER BY dep_name) AS min_salary,
        max(salary) OVER (PARTITION BY dep_name ORDER BY dep_name) AS max_salary
        FROM emp_salary
    )sub;

/*
Функциональное окно скользящее
https://postgrespro.ru/docs/postgrespro/12/functions-window
*/
SELECT * FROM(
  SELECT 
	dep_name,
	emp_no, 
	salary,
	sum(salary) OVER (PARTITION BY dep_name ORDER BY dep_name, salary) AS test_sum, 
	min(salary) OVER (PARTITION BY dep_name ORDER BY dep_name, salary) AS min_salary, 
	max(salary) OVER (PARTITION BY dep_name ORDER BY dep_name, salary) AS max_salary 
    FROM emp_salary
)sub;

--- Агрегирующая функция суммы (окно с несколькими агрегациями ---
SELECT * from (--
	select 
		emp.dep_name, 
		emp.emp_no, 
		emp.salary, 
		SUM(emp.salary) over (partition by dep_name order by dep_name desc) as sum_salary,
		AVG(emp.salary) over (partition by dep_name order by dep_name desc) as avg_salary,
		MIN(emp.salary) over (partition by dep_name order by dep_name desc) as min_salary,
		MAX(emp.salary) over (partition by dep_name order by dep_name desc) as max_salary
	FROM emp_salary emp
	group by emp.dep_name, emp.emp_no, emp.salary
) sub_query

--- Изменение окна просмотра ---
SELECT dep_name, 
	emp_no, 
	salary, 
	rank() 
	OVER w 
	FROM emp_salary 
	WINDOW w AS (PARTITION BY dep_name ORDER BY salary) ORDER BY rank() 
	OVER w;

--- Таблица общих значений (сводная по агрегирующим функциям) ---
SELECT dep_name,
	AVG(salary),
	SUM(salary),
	MIN(salary),
	MAX(salary)
	FROM emp_salary
	GROUP BY emp_salary.dep_name;

--- Создать отдельную схему для клиентов ---
create schema if not exists client;

--- Изменить текущую схему ---
SET search_path TO client;

--- Создать таблицу в текущей схеме ---
create table if not exists client
	(
		client_id bigserial primary key,
		name varchar(100)
	);

--- Заполнить таблицу в текущей схеме ---
insert into client (client_id, name) 
	values
		(1, 'Microsoft'),
		(2, 'Yandex'),
		(3, 'СберТех'),
		(4, 'ВТБ'),
		(5, 'МаилРуГрупп'),
		(6, 'АКБарс'),
		(7, 'Иннотех Касперский');

--- Создать таблицу в текущей схеме ---
create table if not exists transaction
	(
		id bigserial primary key,
		client_id bigint,
		amount decimal,
		created_at timestamptz default NOW(),
		FOREIGN KEY (client_id) REFERENCES client(client_id) ON UPDATE CASCADE
	);

--- Заполнить таблицу в текущей схеме ---
insert into transaction (client_id, amount, created_at)
	values (1, 1500, '2023-01-01 00:00:01'),
	 (1, 1500, '2023-01-01 13:00:02'),
	 (1, 2700, '2023-01-02 11:47:17'),
	 (1, 2700, '2023-01-11 15:20:24'),
	 (1, 1500, '2023-02-01 00:00:01'),
	 (1, 1500, '2023-02-01 13:00:02'),
	 (1, 2700, '2023-02-02 11:47:17'),
	 (1, 2700, '2023-02-11 15:20:24'),
	 (1, 1500, '2023-03-01 00:00:01'),
	 (1, 1500, '2023-03-01 13:00:02'),
	 (1, 2700, '2023-03-02 11:47:17'),
	 (1, 2700, '2023-03-11 15:20:24'),

	 (2, 500, '2023-01-01 00:00:01'),
	 (3, 41500, '2023-01-01 15:00:02'),
	 (3, 32700, '2023-01-02 15:47:17'),
	 (3, 12700, '2023-01-11 17:45:24'),
	 (2, 500, '2023-02-02 00:00:01'),
	 (3, 41500, '2023-02-02 15:00:02'),
	 (3, 32700, '2023-02-03 15:47:17'),
	 (3, 12700, '2023-02-12 17:45:24'),
	 (3, 700, '2023-03-12 01:05:01');

--- Таблица общих значений (сводная по агрегирующим функциям) ---
SELECT client_id, 
	SUM(amount),
	ROUND(AVG(amount), 2),
	MIN(amount),
	MAX(amount)
	FROM transaction
	GROUP BY transaction.client_id;

/*
Использованы примеры отсюда с изменением https://habr.com/ru/company/otus/blog/490296/
*/
SELECT client_id, 
		created_at, 
		amount, 
		SUM(amount) 
	OVER (PARTITION BY client_id) 
	FROM transaction 
	ORDER BY client_id, amount;

SELECT emp.dep_name, AVG(emp.salary), SUM(emp.salary), MIN(emp.salary), MAX(emp.salary)
FROM emp_salary emp
group by emp.dep_name
having SUM(emp.salary) > 5000 and emp.dep_name not like '%sales%';

-- среднее в рамках партиции окна
-- https://postgrespro.ru/docs/postgresql/9.5/tutorial-window
SELECT
    *,
    AVG(amount) OVER(PARTITION BY "month") as avg_by_month,
    AVG(amount) OVER() AS avg_total,
    ROUND(
        amount * 100.0 / AVG(amount) OVER(PARTITION BY "month")
    , 2)
from (
    select
		c.client_id,
        c.name,
        LEFT(t.created_at::date::text, 7) as month,
        amount
    from transaction t
	left join client c ON c.client_id = t.client_id
)temp_table_avg

-- Тразнакция с минимальным значением
-- https://postgrespro.ru/docs/postgrespro/15/functions-window
select
    *,
    first_value(transaction_id) OVER(PARTITION BY "month" ORDER BY "amount") as min_amount_transaction_id
from (
    select
        c.client_id,
        c.name,
        LEFT(t.created_at::date::text, 7) as month,
        amount,
        t.id as transaction_id
    from transaction t
    left join client c ON c.client_id = t.client_id
)temp_table_min

-- Тразнакция с минимальным значением (год)
-- https://postgrespro.ru/docs/postgrespro/15/functions-window
select
    *,
    first_value(transaction_id) OVER(PARTITION BY "year" ORDER BY "amount") as min_amount_transaction_id
from (
    select
        c.client_id,
        c.name,
        LEFT(t.created_at::date::text, 4) as year,
        amount,
        t.id as transaction_id
    from transaction t
    left join client c ON c.client_id = t.client_id
)temp_table_min

-- для пагинации
select
    c.client_id,
    c.name,
    LEFT(t.created_at::date::text, 7) as month,
    amount,
    count(1) OVER() as total_rows
from transaction as t
left join client as c ON c.client_id = t.client_id
limit 10 offset 0


-- row_number
select
    c.client_id,
    c.name,
    LEFT(t.created_at::date::text, 7) as month,
    amount,
    row_number() over () as row_idx,
    count(1) OVER() as total_rows
from transaction as t
left join client as c ON c.client_id = t.client_id
limit 10 offset 10


-- нарастающий итог
-- https://habr.com/ru/company/otus/blog/490296/
select
    *,
    SUM(t_amount) over(ORDER BY c_id, t_created_at rows between unbounded preceding and current row) as sum_total,
    SUM(t_amount) over(partition by c_id, t_month order by c_id, t_created_at rows between unbounded preceding and current row)
from (
    select
        c.client_id as c_id,
        c.name as c_name,
        LEFT(t.created_at::date::text, 7) as t_month,
        amount as t_amount,
        t.created_at as t_created_at
    from transaction as t
    left join client as c ON c.client_id = t.client_id
) AS temp_total
order by c_id, t_created_at

/*
SELECT - выборка данных
INSERT - добавление данных
UPDATE - обновление данных
DROP - удаление
ALTER - замена в таблице, добавление столбца, изменение типа данных
CREATE - создание таблицы, столбца, схема...
WHERE - задание условия
*/


create temp view if not exists temp_agg_window as
	SELECT emp.dep_name, AVG(emp.salary), SUM(emp.salary), MIN(emp.salary), MAX(emp.salary)
	FROM emp_salary emp
	group by emp.dep_name
	having SUM(emp.salary) > 5000 and emp.dep_name not like '%sales%'
	
select * from temp_agg_window
	
CREATE TABLE if not exists employee (
	employee_id SERIAL PRIMARY KEY, 
	name VARCHAR(100) NOT NULL,	
	lastname VARCHAR(100) NOT NULL,	
	company_id integer NOT NULL,
	FOREIGN KEY (company_id) REFERENCES client (client_id) ON DELETE CASCADE
);

CREATE TABLE if not exists employee (
	employee_id SERIAL PRIMARY KEY, 
	name VARCHAR(100) NOT NULL,	
	lastname VARCHAR(100) NOT NULL,	
	company_id integer NOT NULL,
	FOREIGN KEY (company_id) REFERENCES client (client_id) ON DELETE CASCADE
);

ALTER TABLE employee.emp_salary  
ADD CONSTRAINT emp_salary_emp_no_fkey 
FOREIGN KEY (emp_no) 
REFERENCES employee.employee(employee_id) 
ON DELETE CASCADE;

insert into client (name) values
	('ВТБ'),
	('ЛукойлТех'),
	('Сколково'),
	('МФТИGroup');

insert into employee (employee_id, name, lastname, company_id)
values
(1, 'Вениамин', 'Деревянко', 7);